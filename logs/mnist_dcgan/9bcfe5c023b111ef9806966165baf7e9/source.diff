diff --git a/model.ipynb b/model.ipynb
index f088bd8..01c48d2 100644
--- a/model.ipynb
+++ b/model.ipynb
@@ -377,6 +377,223 @@
     "print(\"Caption:\", caption)\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import torch.nn as nn\n",
+    "from labml import experiment\n",
+    "from labml.configs import calculate\n",
+    "from labml_helpers.module import Module\n",
+    "from labml_nn.gan.original.experiment import Configs\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Requirement already satisfied: labml in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (0.4.168)\n",
+      "Collecting labml\n",
+      "  Using cached labml-0.5.2-py3-none-any.whl.metadata (7.1 kB)\n",
+      "Requirement already satisfied: gitpython in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (3.1.43)\n",
+      "Requirement already satisfied: pyyaml in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (6.0.1)\n",
+      "Requirement already satisfied: numpy in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (1.26.3)\n",
+      "Requirement already satisfied: gitdb<5,>=4.0.1 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from gitpython->labml) (4.0.11)\n",
+      "Requirement already satisfied: smmap<6,>=3.0.1 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from gitdb<5,>=4.0.1->gitpython->labml) (5.0.1)\n",
+      "Using cached labml-0.5.2-py3-none-any.whl (110 kB)\n",
+      "Installing collected packages: labml\n",
+      "  Attempting uninstall: labml\n",
+      "    Found existing installation: labml 0.4.168\n",
+      "    Uninstalling labml-0.4.168:\n",
+      "      Successfully uninstalled labml-0.4.168\n",
+      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
+      "labml-nn 0.4.136 requires labml==0.4.168, but you have labml 0.5.2 which is incompatible.\u001b[0m\u001b[31m\n",
+      "\u001b[0mSuccessfully installed labml-0.5.2\n"
+     ]
+    }
+   ],
+   "source": [
+    "!pip install --upgrade labml\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class Generator(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.layers = nn.Sequential(\n",
+    "            nn.ConvTranspose2d(100, 1024, 3, 1, 0, bias=False),\n",
+    "            nn.BatchNorm2d(1024),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(1024, 512, 3, 2, 0, bias=False),\n",
+    "            nn.BatchNorm2d(512),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(512, 256, 4, 2, 1, bias=False),\n",
+    "            nn.BatchNorm2d(256),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(256, 1, 4, 2, 1, bias=False),\n",
+    "            nn.Tanh()\n",
+    "        )\n",
+    "        self.apply(_weights_init)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = x.unsqueeze(-1).unsqueeze(-1)\n",
+    "        x = self.layers(x)\n",
+    "        return x\n",
+    "\n",
+    "class Discriminator(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.layers = nn.Sequential(\n",
+    "            nn.Conv2d(1, 256, 4, 2, 1, bias=False),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(256, 512, 4, 2, 1, bias=False),\n",
+    "            nn.BatchNorm2d(512),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(512, 1024, 3, 2, 0, bias=False),\n",
+    "            nn.BatchNorm2d(1024),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(1024, 1, 3, 1, 0, bias=False),\n",
+    "        )\n",
+    "        self.apply(_weights_init)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = self.layers(x)\n",
+    "        return x.view(x.shape[0], -1)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def _weights_init(m):\n",
+    "    classname = m.__class__.__name__\n",
+    "    if classname.find('Conv') != -1:\n",
+    "        nn.init.normal_(m.weight.data, 0.0, 0.02)\n",
+    "    elif classname.find('BatchNorm') != -1:\n",
+    "        nn.init.normal_(m.weight.data, 1.0, 0.02)\n",
+    "        nn.init.constant_(m.bias.data, 0)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<function __main__.<lambda>(c)>"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "calculate(Configs.generator, 'cnn', lambda c: Generator().to(c.device))\n",
+    "calculate(Configs.discriminator, 'cnn', lambda c: Discriminator().to(c.device))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/cth/Library/Python/3.12/lib/python/site-packages/IPython/core/interactiveshell.py:3526: Warning: Overriding option for generator: cnn\n",
+      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
+      "/Users/cth/Library/Python/3.12/lib/python/site-packages/IPython/core/interactiveshell.py:3526: Warning: Overriding option for discriminator: cnn\n",
+      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "<pre style=\"overflow-x: scroll;\"></pre>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml_nn/gan/original/experiment.py:121: SyntaxWarning: invalid escape sequence '\\s'\n",
+      "  \"\"\"\n"
+     ]
+    },
+    {
+     "ename": "AttributeError",
+     "evalue": "module 'labml.tracker' has no attribute 'set_image'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[16], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m         conf\u001b[38;5;241m.\u001b[39mrun()\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m---> 12\u001b[0m     \u001b[43mmain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
+      "Cell \u001b[0;32mIn[16], line 9\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m experiment\u001b[38;5;241m.\u001b[39mconfigs(conf,\n\u001b[1;32m      5\u001b[0m                    {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdiscriminator\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcnn\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      6\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgenerator\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcnn\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      7\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel_smoothing\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.01\u001b[39m})\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m experiment\u001b[38;5;241m.\u001b[39mstart():\n\u001b[0;32m----> 9\u001b[0m     \u001b[43mconf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml_helpers/train_valid.py:265\u001b[0m, in \u001b[0;36mTrainValidConfigs.run\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    263\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrun\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    264\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m monit\u001b[38;5;241m.\u001b[39msection(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInitialize\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m--> 265\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minit\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    266\u001b[0m     _ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalidator\n\u001b[1;32m    267\u001b[0m     _ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrainer\n",
+      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml_nn/gan/original/experiment.py:118\u001b[0m, in \u001b[0;36mConfigs.init\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    116\u001b[0m tracker\u001b[38;5;241m.\u001b[39mset_scalar(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mloss.generator.*\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    117\u001b[0m tracker\u001b[38;5;241m.\u001b[39mset_scalar(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mloss.discriminator.*\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m--> 118\u001b[0m \u001b[43mtracker\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_image\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgenerated\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m, \u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m100\u001b[39m)\n",
+      "\u001b[0;31mAttributeError\u001b[0m: module 'labml.tracker' has no attribute 'set_image'"
+     ]
+    }
+   ],
+   "source": [
+    "def main():\n",
+    "    conf = Configs()\n",
+    "    experiment.create(name='mnist_dcgan')\n",
+    "    experiment.configs(conf,\n",
+    "                       {'discriminator': 'cnn',\n",
+    "                        'generator': 'cnn',\n",
+    "                        'label_smoothing': 0.01})\n",
+    "    with experiment.start():\n",
+    "        # Comment out the problematic line\n",
+    "        # conf.run()  # Direct call to run method might be problematic, try alternative approach\n",
+    "        with monit.section(\"Initialize\"):\n",
+    "            conf.init()\n",
+    "        _ = conf.validator\n",
+    "        _ = conf.trainer\n",
+    "        conf.trainer()\n",
+    "\n",
+    "main()\n",
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": null,