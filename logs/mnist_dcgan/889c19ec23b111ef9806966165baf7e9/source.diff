diff --git a/model.ipynb b/model.ipynb
index f088bd8..b266711 100644
--- a/model.ipynb
+++ b/model.ipynb
@@ -377,6 +377,190 @@
     "print(\"Caption:\", caption)\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import torch.nn as nn\n",
+    "from labml import experiment\n",
+    "from labml.configs import calculate\n",
+    "from labml_helpers.module import Module\n",
+    "from labml_nn.gan.original.experiment import Configs\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Requirement already satisfied: labml in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (0.4.168)\n",
+      "Collecting labml\n",
+      "  Using cached labml-0.5.2-py3-none-any.whl.metadata (7.1 kB)\n",
+      "Requirement already satisfied: gitpython in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (3.1.43)\n",
+      "Requirement already satisfied: pyyaml in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (6.0.1)\n",
+      "Requirement already satisfied: numpy in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from labml) (1.26.3)\n",
+      "Requirement already satisfied: gitdb<5,>=4.0.1 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from gitpython->labml) (4.0.11)\n",
+      "Requirement already satisfied: smmap<6,>=3.0.1 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from gitdb<5,>=4.0.1->gitpython->labml) (5.0.1)\n",
+      "Using cached labml-0.5.2-py3-none-any.whl (110 kB)\n",
+      "Installing collected packages: labml\n",
+      "  Attempting uninstall: labml\n",
+      "    Found existing installation: labml 0.4.168\n",
+      "    Uninstalling labml-0.4.168:\n",
+      "      Successfully uninstalled labml-0.4.168\n",
+      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
+      "labml-nn 0.4.136 requires labml==0.4.168, but you have labml 0.5.2 which is incompatible.\u001b[0m\u001b[31m\n",
+      "\u001b[0mSuccessfully installed labml-0.5.2\n"
+     ]
+    }
+   ],
+   "source": [
+    "!pip install --upgrade labml\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class Generator(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.layers = nn.Sequential(\n",
+    "            nn.ConvTranspose2d(100, 1024, 3, 1, 0, bias=False),\n",
+    "            nn.BatchNorm2d(1024),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(1024, 512, 3, 2, 0, bias=False),\n",
+    "            nn.BatchNorm2d(512),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(512, 256, 4, 2, 1, bias=False),\n",
+    "            nn.BatchNorm2d(256),\n",
+    "            nn.ReLU(True),\n",
+    "            nn.ConvTranspose2d(256, 1, 4, 2, 1, bias=False),\n",
+    "            nn.Tanh()\n",
+    "        )\n",
+    "        self.apply(_weights_init)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = x.unsqueeze(-1).unsqueeze(-1)\n",
+    "        x = self.layers(x)\n",
+    "        return x\n",
+    "\n",
+    "class Discriminator(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.layers = nn.Sequential(\n",
+    "            nn.Conv2d(1, 256, 4, 2, 1, bias=False),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(256, 512, 4, 2, 1, bias=False),\n",
+    "            nn.BatchNorm2d(512),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(512, 1024, 3, 2, 0, bias=False),\n",
+    "            nn.BatchNorm2d(1024),\n",
+    "            nn.LeakyReLU(0.2, inplace=True),\n",
+    "            nn.Conv2d(1024, 1, 3, 1, 0, bias=False),\n",
+    "        )\n",
+    "        self.apply(_weights_init)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = self.layers(x)\n",
+    "        return x.view(x.shape[0], -1)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def _weights_init(m):\n",
+    "    classname = m.__class__.__name__\n",
+    "    if classname.find('Conv') != -1:\n",
+    "        nn.init.normal_(m.weight.data, 0.0, 0.02)\n",
+    "    elif classname.find('BatchNorm') != -1:\n",
+    "        nn.init.normal_(m.weight.data, 1.0, 0.02)\n",
+    "        nn.init.constant_(m.bias.data, 0)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<function __main__.<lambda>(c)>"
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "calculate(Configs.generator, 'cnn', lambda c: Generator().to(c.device))\n",
+    "calculate(Configs.discriminator, 'cnn', lambda c: Discriminator().to(c.device))\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<pre style=\"overflow-x: scroll;\"><span style=\"color: #C5C1B4\"></span>\n",
+       "<span style=\"color: #C5C1B4\">--------------------------------------------------</span><span style=\"color: #DDB62B\"><strong><span style=\"text-decoration: underline\"></span></strong></span>\n",
+       "<span style=\"color: #DDB62B\"><strong><span style=\"text-decoration: underline\">LABML WARNING</span></strong></span>\n",
+       "<span style=\"color: #DDB62B\"><strong><span style=\"text-decoration: underline\"></span></strong></span><strong>.labml.yaml</strong> config file could not be found. Looking in path: <span style=\"color: #208FFB\">/Users/cth/Desktop/Super-Model</span><span style=\"color: #C5C1B4\"></span>\n",
+       "<span style=\"color: #C5C1B4\">--------------------------------------------------</span></pre>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "ename": "ImportError",
+     "evalue": "cannot import name 'get_api_url' from 'labml.internal.lab' (/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml/internal/lab.py)",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[11], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m         conf\u001b[38;5;241m.\u001b[39mrun()\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m---> 12\u001b[0m     \u001b[43mmain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
+      "Cell \u001b[0;32mIn[11], line 8\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m experiment\u001b[38;5;241m.\u001b[39mcreate(name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmnist_dcgan\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m experiment\u001b[38;5;241m.\u001b[39mconfigs(conf,\n\u001b[1;32m      5\u001b[0m                    {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdiscriminator\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcnn\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      6\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgenerator\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcnn\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      7\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel_smoothing\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.01\u001b[39m})\n\u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mexperiment\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstart\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m      9\u001b[0m     conf\u001b[38;5;241m.\u001b[39mrun()\n",
+      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml/experiment.py:205\u001b[0m, in \u001b[0;36mstart\u001b[0;34m(global_step)\u001b[0m\n\u001b[1;32m    200\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlabml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minternal\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mexperiment\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msklearn\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m add_models \u001b[38;5;28;01mas\u001b[39;00m _add_sklearn_models\n\u001b[1;32m    201\u001b[0m     _add_sklearn_models(models)\n\u001b[1;32m    204\u001b[0m \u001b[38;5;129m@overload\u001b[39m\n\u001b[0;32m--> 205\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconfigs\u001b[39m(conf_dict: Dict[\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28many\u001b[39m]):\n\u001b[1;32m    206\u001b[0m     \u001b[38;5;241m.\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;241m.\u001b[39m\n\u001b[1;32m    209\u001b[0m \u001b[38;5;129m@overload\u001b[39m\n\u001b[1;32m    210\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconfigs\u001b[39m(conf_dict: Dict[\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28many\u001b[39m], conf_override: Dict[\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28many\u001b[39m]):\n",
+      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml/internal/experiment/__init__.py:256\u001b[0m, in \u001b[0;36mstart\u001b[0;34m(self, global_step)\u001b[0m\n\u001b[1;32m    254\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun\u001b[38;5;241m.\u001b[39mrepo_remotes \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(repo\u001b[38;5;241m.\u001b[39mremote()\u001b[38;5;241m.\u001b[39murls)\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, git\u001b[38;5;241m.\u001b[39mGitCommandError):\n\u001b[0;32m--> 256\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun\u001b[38;5;241m.\u001b[39mrepo_remotes \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    257\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun\u001b[38;5;241m.\u001b[39mcommit \u001b[38;5;241m=\u001b[39m repo\u001b[38;5;241m.\u001b[39mhead\u001b[38;5;241m.\u001b[39mcommit\u001b[38;5;241m.\u001b[39mhexsha\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun\u001b[38;5;241m.\u001b[39mcommit_message \u001b[38;5;241m=\u001b[39m repo\u001b[38;5;241m.\u001b[39mhead\u001b[38;5;241m.\u001b[39mcommit\u001b[38;5;241m.\u001b[39mmessage\u001b[38;5;241m.\u001b[39mstrip()\n",
+      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml/internal/computer/configs.py:8\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlabml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minternal\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mconfigs\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m WebAPIConfigs\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlabml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minternal\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcomputer\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m CONFIGS_FOLDER\n\u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlabml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minternal\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlab\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m get_api_url\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlabml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlogger\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Text\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mComputer\u001b[39;00m:\n",
+      "\u001b[0;31mImportError\u001b[0m: cannot import name 'get_api_url' from 'labml.internal.lab' (/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/labml/internal/lab.py)"
+     ]
+    }
+   ],
+   "source": [
+    "def main():\n",
+    "    conf = Configs()\n",
+    "    experiment.create(name='mnist_dcgan')\n",
+    "    experiment.configs(conf,\n",
+    "                       {'discriminator': 'cnn',\n",
+    "                        'generator': 'cnn',\n",
+    "                        'label_smoothing': 0.01})\n",
+    "    with experiment.start():\n",
+    "        conf.run()\n",
+    "\n",
+    "if __name__ == '__main__':\n",
+    "    main()\n"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,